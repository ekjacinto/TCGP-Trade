rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Allow users to read all cards
    match /cards/{cardId} {
      allow read: if true;
    }
    
    // Allow users to manage their own data, but let other authenticated users read basic profile info
    match /users/{userId} {
      // Allow all authenticated users to read user profiles
      allow read: if isAuthenticated();
      // Only allow users to write their own data
      allow write: if isOwner(userId);
      
      // Allow users to manage their own wishlist subcollection
      match /wishlist/{cardId} {
        allow read, write: if isOwner(userId);
      }
      
      // Allow users to manage their own pokedex subcollection
      match /pokedex/{cardId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for trades collection
    match /trades/{tradeId} {
      // Allow authenticated users to read all trade listings
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create trades
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update/delete only their own trades
      allow update, delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Rules for chats collection
    match /chats/{chatId} {
      // Allow access if user is a participant
      allow read: if isAuthenticated() 
        && request.auth.uid in resource.data.participants;
      
      // Allow creation of new chats if the user is one of the participants
      allow create: if isAuthenticated() 
        && request.auth.uid in request.resource.data.participants
        && request.resource.data.participants.size() == 2;
      
      // Allow updates if user is a participant
      allow update: if isAuthenticated() 
        && request.auth.uid in resource.data.participants;
      
      // Allow access to messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow create: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
} 